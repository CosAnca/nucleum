// =============================================================================
// UTILITIES / SPACING
// =============================================================================

@use "sass:meta";
@use "sass:string";
@use "sass-mq/mq";
@use "../settings" as *;
@use "../tools";

// Utility classes to put specific spacing values onto elements, overriding any
// existing matching property declarations

/* stylelint-disable declaration-no-important */

// Settings
// ==============================================

// prettier-ignore
$spacing-properties: (
  "m": margin,
  "p": padding,
);

// prettier-ignore
$spacing-directions: (
  "null": null,
  "t": top,
  "r": right,
  "b": bottom,
  "l": left,
  "x": (
    "l": left,
    "r": right,
  ),
  "y": (
    "t": top,
    "b": bottom
  )
);

// Tools (Private / Framework Only)
// ==============================================
//
// We use a few mixins to build spacing classes, rather than generating them directly.
// This also allows us to call the mixins from within other loops.

@mixin _global-spacing-selector(
  $property-alias,
  $direction-alias,
  $size,
  $breakpoint
) {
  // If we have a `null` direction, the implication is that we want to use the
  // respective property on "all" sides.
  // This can be used as `.u-m` or `.u-p`.
  @if ($direction-alias == "null") {
    .u-#{$property-alias}-#{$size}#{$breakpoint} {
      @content;
    }
  } @else {
    .u-#{$property-alias}#{$direction-alias}-#{$size}#{$breakpoint} {
      @content;
    }
  }
}

@mixin _global-spacing-declaration($property, $direction, $value) {
  #{$property}#{if($direction != null, "-", null)}#{$direction}: $value !important;
}

@mixin _build-spacing($breakpoint: null) {
  @each $property-alias, $property in $spacing-properties {
    @each $direction-alias, $direction in $spacing-directions {
      @each $size, $value in $spacings {
        $size-number: tools.str-replace($size, "spacing-", "");
        $rem-value: null;

        @if ($value == 0) {
          $rem-value: 0;
        } @else {
          $rem-value: tools.rem($value);
        }

        @include _global-spacing-selector(
          $property-alias,
          $direction-alias,
          $size-number,
          $breakpoint
        ) {
          // If the `$direction-key` has nested values, loop through them too
          // prettier-ignore
          @if meta.type-of($direction) == map {
            @each $direction-key, $direction-value in $direction {
              @each $direction-value-key in $direction-value {
                @include _global-spacing-declaration($property, $direction-value-key, $rem-value);
              }
            }
          } @else {
            // prettier-ignore
            @include _global-spacing-declaration($property, $direction, $rem-value);
          }
        }
      }
    }

    // The below loop will generate us a suite of classes
    // to use with the margin property when its value
    // should be auto
    //   .u-mt-auto {} // Applies margin-top: auto;
    //   .u-my-auto {} // Applies margin-right and margin-left auto;

    @if ($property == "margin") {
      @each $direction-alias, $direction in $spacing-directions {
        @if ($direction != null) {
          .u-#{$property-alias}#{$direction-alias}-auto#{if($breakpoint != null, $breakpoint, null)} {
            // prettier-ignore
            @if meta.type-of($direction) == map {
              @each $direction-key, $direction-value in $direction {
                @each $direction-value-key in $direction-value {
                  @include _global-spacing-declaration($property, $direction-value-key, string.unquote("auto"));
                }
              }
            } @else {
              // prettier-ignore
              @include _global-spacing-declaration($property, $direction, string.unquote("auto"));
            }
          }
        } @else {
          .u-#{$property-alias}-auto {
            margin: auto;
          }
        }
      }
    }
  }
}

// Base
// ==============================================

// The below loop will generate us a suite of classes:
//   .u-p-s {} // Applies padding: [small-spacing-value];
//   .u-mt-m {} // Applies margin-top: [medium-spacing-value];
//   .u-pl-l\@md {} // Applies padding-left: [large-spacing-value] on medium viewports;
//   .u-mx-s {} // Applies top and bottom small margin.

// Generate our regular, non-responsive classes.
@include _build-spacing;

// Generate our responsive classes by looping over the series of breakpoints
// held by $mq-breakpoints inside _breakpoint.scss file.
@each $breakpoint, $value in $breakpoints {
  @include mq.mq($from: $breakpoint) {
    @include _build-spacing(\@#{$breakpoint});
  }
}
