// =============================================================================
// TOOLS / FUNCTIONS
// =============================================================================

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "../settings" as *;

// spacing()
// ------------------------------------
// Function to get spacing from $spacings-scale instead of using `map.get`.
@function spacing($key) {
  @return rem(map.get($spacings, $key));
}

// border-width()
// ------------------------------------
// Function to get border-width from $border-widths instead of using `map.get`.
@function border-width($key) {
  @return rem(map.get($border-width, $key));
}

// border-radius()
// ------------------------------------
// Function to get border-radius from $border-radius instead of using `map.get`.
@function border-radius($key) {
  @return rem(map.get($border-radius, $key));
}

// $colors map reader
// ===========================================

// Function to get color from `$colors` instead of using `map.get`.
//
// Usage:
//
//   .foo {
//     color: color(<key>);
//   }
//
@function color($key) {
  @return map.get($colors, $key);
}

// Conversion
// ==============================================

// to-rgb()
// ------------------------------------
//
// Function to convert a HEX color value to RGB.
@function to-rgb($value) {
  @return red($value), green($value), blue($value);
}

// strip-unit()
// ------------------------------------
//
// Function to remove the unit from a value
// i.e. strip-unit(20px) would return 20.
@function strip-unit($num) {
  @if meta.type-of($num) == number {
    @return math.div($num, $num * 0 + 1);
  } @else {
    @warn "Value must be a number i.e. 12, 24px etc.";
  }
}

// rem()
// ------------------------------------

// Converts any `px` or `em` value to `rem`.
@function rem($value, $base-font-size: 16px) {
  @if $value == 0 {
    @return $value;
  }

  @if unit($value) == "rem" {
    @return $value;
  }

  @if unit($value) == "px" {
    @return (strip-unit(math.div($value, $base-font-size))) * 1rem;
  }

  @if unit($value) == "em" {
    @return strip-unit($value) * 1rem;
  } @else {
    @warn "Value must be em or px.";
  }
}

// em()
// ------------------------------------
//
// Converts any `px` value to `em`.
//
// @param {Number} $px - value to convert
// @param {Number} $base-font-size ($font-size-base) - `<body>` font size
//
// @example scss
//  $font-size-in-ems: em(16px);
//  p { font-size: em(16px); }
//
// @requires $base-font-size
// @returns {Number}
//
@function em($value, $base-font-size: 16px) {
  @if $value == 0 {
    @return $value;
  }

  @if math.is-unitless($value) {
    @warn "Assuming #{$value} to be in pixels, attempting to convert it into pixels.";
    @return em($value * 1px);
  }

  // if $value is compatible with em units then return value unchanged
  @if math.compatible($value, 1em) {
    @return $value;
  }

  @return math.div($value, $base-font-size) * 1em;
}

// Misc
// ===========================================

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {string} $string - Initial string
// @param {string} $search - Substring to replace
// @param {string} $replace ('') - New value
// @return {string} - Updated string
// https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
