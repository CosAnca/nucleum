// =============================================================================
// TOOLS / TYPOGRAPHY
// =============================================================================

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "../settings" as *;
@use "functions";

// Functions
// ==============================================

// font-family()
// ------------------------------------

// Function to get font-family from `$global-font-families` map.
@function font-family($key) {
  @return map.get($global-font-stack, $key);
}

// font-size()
// ------------------------------------

// Function to get font-size from `$font-sizes` map.
// Returns the font size value in `rem`.
@function font-size($key) {
  $value: map.get($font-sizes, $key);
  @return functions.rem($value);
}

// font-weight()
// ------------------------------------

// Function to get font-weight from `$font-weights` map.
@function font-weight($key) {
  @return map.get($font-weights, $key);
}

// line-height()
// ------------------------------------

// Function to get line-height from `$line-height` map.
@function line-height($key) {
  @return map.get($line-heights, $key);
}

// Mixins
// ==============================================

// @include font-smoothing
// ------------------------------------

// Controls the application of anti-aliasing when fonts are rendered on macOS.

@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// @include font-size
// ------------------------------------

// Generates a rem font-size and a baseline-compatible unitless line-height
// from a font-size value held in "settings/_font-sizes.scss".
//
// Basic usage is simply:
//   @use "../tools";
//
//   @include tools.font-size("font-size-md");
//
// You can force a specific line-height by passing it as the second argument:
//
//   @include tools.font-size("font-size-md", 1);
//
//   or (by referencing a line-height from `settings/_line-heights.scss` file)
//
//   @include tools.font-size("font-size-md", "line-height-tight");
//
// You can prevent a line-height declaration output by setting the second
// argument to `false`.
//
//   @include tools.font-size("font-size-md", false);
//
// You can also modify the line-height by increments, while staying in the
// baseline grid, by setting the `$modifier` parameter. It takes a positive
// or negative integer, and it will add or remove "lines" to the  generated
// line-height. This is the recomended way to do it, unless you really need
// an absolute value. i.e.:
//
//   // add 2 lines:
//   @include tools.font-size("font-size-2xl", $modifier: +2);
//
//   // subtract 1 line:
//   @include tools.font-size("font-size-2xl", $modifier: -1);

@mixin font-size(
  $font-size,
  $line-height: auto,
  $modifier: 0,
  $important: false
) {
  @if not(map.has-key($font-sizes, $font-size)) {
    @error "`#{$font-size}` is not a valid key in `settings/_font-sizes.scss`.";
  }

  @if ($important == true) {
    $important: !important;
  } @else if ($important == false) {
    $important: null;
  } @else {
    @error "`#{$important}` needs to be `true` or `false`.";
  }

  font-size: font-size($font-size) $important;

  @if ($line-height == "auto") {
    // Define how many grid lines each text line should span.
    // By default, we set it to the minimum number of lines necessary
    // in order to contain the defined font-size, +2 for some breathing room.
    // This can be modified with the `$modifier` parameter.
    $lines: ceil(math.div(map.get($font-sizes, $font-size), $spacing-base)) +
      $modifier +
      2;
    $line-height: $lines * $spacing-base;

    line-height: (math.div($line-height, map.get($font-sizes, $font-size)))
      $important;
  } @else {
    @if (map.has-key($line-heights, $line-height)) {
      line-height: line-height($line-height) $important;
    } @else if ($line-height != false) {
      @error "`#{$line-height}` is not a valid key in `settings/_line-heights.scss`.";
    }
  }
}

// @include font-weight
// ------------------------------------

@mixin font-weight($weight) {
  font-weight: font-weight($weight);
}

// @include line-height
// ------------------------------------

@mixin line-height($size) {
  line-height: line-height($size);
}
